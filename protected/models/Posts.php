<?php

/**
 * This is the model class for table "posts".
 *
 * The followings are the available columns in table 'posts':
 * @property integer $id
 * @property string $title
 * @property string $excerpt
 * @property string $content
 * @property string $category
 * @property string $tags
 * @property string $author
 * @property string $slug
 * @property string $createdOn
 * @property string $featuredImage
 * @property integer $published
 * @property integer $likes
 */
class Posts extends CActiveRecord
{

    public $file;
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'posts';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
		    array('title, excerpt','required'),
			array('published, likes', 'numerical', 'integerOnly'=>true),
			array('slug, title, excerpt, tags, featuredImage', 'length', 'max'=>125),
			array('category', 'length', 'max'=>45),
			array('author', 'length', 'max'=>65),
            array('file', 'file', 'allowEmpty' => true, 'types'=>'jpg, gif, png, jpeg'),
            array('content, createdOn', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, title, excerpt, content, category, tags, author, slug, createdOn, featuredImage, published', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'title' => 'Title',
			'excerpt' => 'Excerpt',
			'content' => 'Content',
			'category' => 'Category',
			'tags' => 'Tags',
			'author' => 'Author',
			'slug' => 'Slug',
			'createdOn' => 'Created On',
			'featuredImage' => 'Featured Image',
			'published' => 'Post Status',
            'file' => 'Featured Image'
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id);
		$criteria->compare('title',$this->title,true);
		$criteria->compare('excerpt',$this->excerpt,true);
		$criteria->compare('content',$this->content,true);
		$criteria->compare('category',$this->category,true);
		$criteria->compare('tags',$this->tags,true);
		$criteria->compare('author',$this->author,true);
		$criteria->compare('slug',$this->slug,true);
		$criteria->compare('createdOn',$this->createdOn,true);
		$criteria->compare('featuredImage',$this->featuredImage,true);
		$criteria->compare('published',$this->published);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

    protected function beforeSave()
    {

        return parent::beforeSave(); // TODO: Change the autogenerated stub
    }

    protected function afterSave()
    {
        $this->createSlug();
        parent::afterSave(); // TODO: Change the autogenerated stub
    }



    private function createSlug(){
        $clean =  preg_replace('/[^A-Za-z0-9. -]/', '', $this->title);
        $cleanTitle = str_replace(' ', '-', $clean);
        $url = Yii::app()->getBaseUrl(true) . '/posts/' . $this->id .'/' .$cleanTitle;
        $sql = "UPDATE posts set slug='". $url . "' Where id=". $this->id;
        try{
            Yii::app()->db->createCommand($sql)->query();
        }catch (Exception $e){
            Yii::log($e->getMessage(), CLogger::LEVEL_ERROR, "posts");
        }
    }

    /**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Posts the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function getCategories(){
	    return [
	        'general' => "General",
            'funny' => "Funny",
            'serious' => "Serious",
            'educational' => "Educationa",
            'technology' => "Tecnology"
        ];
    }

    public function getPostDate(){
        return date( "D M j, Y",strtotime( $this->createdOn ) );
    }

    public function getPublishStatus(){
	    return [
	      0 => "Unpublished",
          1 => "Published"
        ];
    }


}
